%PDF-1.3
%¥±ë¼
1 0 obj
<<
  /CreationDate (D:20211215110954+13'00')
  /Creator (PDF::Class-0.4.17; PDF::Content-0.5.12; PDF-0.4.17; Raku-6.d; PDF::Tags-0.0.10; Pod::To::PDF-0.0.1)
  /Producer (PDF::API6-0.2.3)
  /Title (class Bag)
>>
endobj

2 0 obj
<<
  /Type /Catalog
  /Dests 3 0 R
  /MarkInfo << /Marked true >>
  /Outlines 71 0 R
  /Pages 10 0 R
  /StructTreeRoot 317 0 R
>>
endobj

3 0 obj
<<
  /Creating_Bag_objects [ 4 0 R /FitBH 774 ]
  /Immutable_collection_of_distinct_objects_with_integer_weights [ 11 0 R /FitBH 712.4 ]
  /Note_on_reverse_and_ordering [ 49 0 R /FitBH 774 ]
  /Operators [ 39 0 R /FitBH 774 ]
  /See_also [ 53 0 R /FitBH 774 ]
  /Subroutines [ 45 0 R /FitBH 774 ]
  /class_Bag [ 11 0 R /FitBH 774 ]
  /sub_bag [ 45 0 R /FitBH 712.4 ]
>>
endobj

4 0 obj
<<
  /Type /Page
  /Annots [ 5 0 R 7 0 R ]
  /Contents 9 0 R
  /MediaBox [ 0 0 612 792 ]
  /Parent 10 0 R
  /Resources <<
    /ExtGState <<
      /GS1 57 0 R
      /GS10 58 0 R
      /GS11 59 0 R
      /GS12 60 0 R
      /GS13 61 0 R
      /GS14 62 0 R
      /GS2 63 0 R
      /GS3 64 0 R
      /GS4 65 0 R
      /GS5 66 0 R
      /GS6 67 0 R
      /GS7 68 0 R
      /GS8 69 0 R
      /GS9 70 0 R
    >>
    /Font << /F1 34 0 R /F2 35 0 R /F3 37 0 R >>
  >>
  /StructParents 1
>>
endobj

5 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 6 0 R
  /Border [ 0 0 0 ]
  /Contents (bag)
  /P 4 0 R
  /Rect [ 161.15 705 179.59 720 ]
>>
endobj

6 0 obj
<< /Type /Action /S /GoTo /D /sub_bag >>
endobj

7 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 8 0 R
  /Border [ 0 0 0 ]
  /Contents (List)
  /P 4 0 R
  /Rect [ 458.31 511.4 477.87 526.4 ]
>>
endobj

8 0 obj
<< /Type /Action /S /URI /URI (/type/List) >>
endobj

9 0 obj
<< /Length 7308 >> stream
/H1 << /MCID 0 >> BDC
  BT
    1 0 0 1 20 752 Tm
    /F1 20 Tf
    (Creating Bag objects) Tj
    22 TL
    T*
  ET
  q
    1 w
    20 750 m
    198.86 750 l
    S
  Q
EMC
/P << /MCID 1 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F2 10 Tf
    (Bag) Tj
  ET
EMC
/P << /MCID 2 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F3 10 Tf
    [ -2400 (s can be composed using the ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 3 >> BDC
    BT
      1 0 0 1 20 708 Tm
      [ -14315 (bag) ] TJ
    ET
    q
      0.5 w
      163.15 707 m
      177.59 707 l
      S
    Q
  EMC
Q
/P << /MCID 4 >> BDC
  BT
    1 0 0 1 20 708 Tm
    [ -16009 ( subroutine \(or ) ] TJ
  ET
EMC
/P << /MCID 5 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F2 10 Tf
    [ -22397 (Bag.new) ] TJ
  ET
EMC
/P << /MCID 6 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F3 10 Tf
    [ -27197 (, for which it is a shorthand\). Any positional parameters, regardless of) ] TJ
    11 TL
    T*
    (their type, become elements of the bag:) Tj
  ET
EMC
/Code << /MCID 7 >> BDC
  BT
    1 0 0 1 30 679.4 Tm
    /F2 8 Tf
    (my $n = bag "a" => 0, "b" => 1, "c" => 2, "c" => 2;) Tj
    8.8 TL
    T*
    (say $n.keys.raku;         OUTPUT: «\(:c\(2\), :b\(1\), :a\(0\)\).Seq») Tj
    T*
    (say $n.keys.map\(&WHAT\);   OUTPUT: «\(\(Pair\) \(Pair\) \(Pair\)\)») Tj
    T*
    (say $n.values.raku;       OUTPUT: «\(2, 1, 1\).Seq») Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS1 gs
  /GS2 gs
  28 642.2 562 48 re
  B
Q
/P << /MCID 8 >> BDC
  BT
    1 0 0 1 20 622.2 Tm
    /F3 10 Tf
    (Alternatively, the ) Tj
  ET
EMC
/P << /MCID 9 >> BDC
  BT
    1 0 0 1 20 622.2 Tm
    /F2 10 Tf
    [ -7499 (.Bag) ] TJ
  ET
EMC
/P << /MCID 10 >> BDC
  BT
    1 0 0 1 20 622.2 Tm
    /F3 10 Tf
    [ -10499 ( coercer \(or its functional form, ) ] TJ
  ET
EMC
/P << /MCID 11 >> BDC
  BT
    1 0 0 1 20 622.2 Tm
    /F2 10 Tf
    [ -23551 (Bag\(\)) ] TJ
  ET
EMC
/P << /MCID 12 >> BDC
  BT
    1 0 0 1 20 622.2 Tm
    /F3 10 Tf
    [ -27151 (\) can be called on an existing object to coerce it to a ) ] TJ
  ET
EMC
/P << /MCID 13 >> BDC
  BT
    1 0 0 1 20 622.2 Tm
    /F2 10 Tf
    [ -48424 (Bag) ] TJ
  ET
EMC
/P << /MCID 14 >> BDC
  BT
    1 0 0 1 20 622.2 Tm
    /F3 10 Tf
    [ -50824 (. Its semantics) ] TJ
    11 TL
    T*
    (depend on the type and contents of the object. In general it evaluates the object in list context and creates a bag with the resulting items as) Tj
    T*
    (elements, although for Hash-like objects or Pair items, only the keys become elements of the bag, and the \(cumulative\) values become the) Tj
    T*
    (associated integer weights:) Tj
  ET
EMC
/Code << /MCID 15 >> BDC
  BT
    1 0 0 1 30 571.6 Tm
    /F2 8 Tf
    (my $n = \("a" => 0, "b" => 1, "c" => 2, "c" => 2\).Bag;) Tj
    8.8 TL
    T*
    (say $n.keys.raku;         OUTPUT: «\("b", "c"\).Seq») Tj
    T*
    (say $n.keys.map\(&WHAT\);   OUTPUT: «\(\(Str\) \(Str\)\)») Tj
    T*
    (say $n.values.raku;       OUTPUT: «\(1, 4\).Seq») Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS3 gs
  /GS4 gs
  28 534.4 562 48 re
  B
Q
/P << /MCID 16 >> BDC
  BT
    1 0 0 1 20 514.4 Tm
    /F3 10 Tf
    (Furthermore, you can get a ) Tj
  ET
EMC
/P << /MCID 17 >> BDC
  BT
    1 0 0 1 20 514.4 Tm
    /F2 10 Tf
    [ -11303 (Bag) ] TJ
  ET
EMC
/P << /MCID 18 >> BDC
  BT
    1 0 0 1 20 514.4 Tm
    /F3 10 Tf
    [ -13703 ( by using bag operators \(see next section\) on objects of other types such as ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 19 >> BDC
    BT
      1 0 0 1 20 514.4 Tm
      [ -44031 (List) ] TJ
    ET
    q
      0.5 w
      460.31 513.4 m
      475.87 513.4 l
      S
    Q
  EMC
Q
/P << /MCID 20 >> BDC
  BT
    1 0 0 1 20 514.4 Tm
    [ -45837 (, which will act like they) ] TJ
    11 TL
    T*
    (internally call ) Tj
  ET
EMC
/P << /MCID 21 >> BDC
  BT
    1 0 0 1 20 503.4 Tm
    /F2 10 Tf
    [ -6027 (.Bag) ] TJ
  ET
EMC
/P << /MCID 22 >> BDC
  BT
    1 0 0 1 20 503.4 Tm
    /F3 10 Tf
    [ -9027 ( on them before performing the operation. Be aware of the tight precedence of those operators though, which may) ] TJ
    T*
    (require you to use parentheses around arguments:) Tj
  ET
EMC
/Code << /MCID 23 >> BDC
  BT
    1 0 0 1 30 474.8 Tm
    /F2 8 Tf
    (say \(1..5\) \(+\) 4;   OUTPUT: «Bag\(1 2 3 4\(2\) 5\)») Tj
    8.8 TL
    T*
  ET
EMC
q
  0 g
  0 G
  /GS5 gs
  /GS6 gs
  28 464 562 21.6 re
  B
Q
/P << /MCID 24 >> BDC
  BT
    1 0 0 1 20 444 Tm
    /F3 10 Tf
    (Of course, you can also create a ) Tj
  ET
EMC
/P << /MCID 25 >> BDC
  BT
    1 0 0 1 20 444 Tm
    /F2 10 Tf
    [ -13245 (Bag) ] TJ
  ET
EMC
/P << /MCID 26 >> BDC
  BT
    1 0 0 1 20 444 Tm
    /F3 10 Tf
    [ -15645 ( with the ) ] TJ
  ET
EMC
/P << /MCID 27 >> BDC
  BT
    1 0 0 1 20 444 Tm
    /F2 10 Tf
    [ -19645 (.new) ] TJ
  ET
EMC
/P << /MCID 28 >> BDC
  BT
    1 0 0 1 20 444 Tm
    /F3 10 Tf
    [ -22645 ( method.) ] TJ
  ET
EMC
/Code << /MCID 29 >> BDC
  BT
    1 0 0 1 30 426.4 Tm
    /F2 8 Tf
    (my $breakfast = Bag.new\( <spam eggs spam spam bacon spam> \);) Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS7 gs
  /GS8 gs
  28 415.6 562 21.6 re
  B
Q
/P << /MCID 30 >> BDC
  BT
    1 0 0 1 20 395.6 Tm
    /F3 10 Tf
    (Since 6.d \(2019.03 and later\) you can also use this syntax for parameterization of the ) Tj
  ET
EMC
/P << /MCID 31 >> BDC
  BT
    1 0 0 1 20 395.6 Tm
    /F2 10 Tf
    [ -34438 (Bag) ] TJ
  ET
EMC
/P << /MCID 32 >> BDC
  BT
    1 0 0 1 20 395.6 Tm
    /F3 10 Tf
    [ -36838 (, to specify which type of values are acceptable:) ] TJ
  ET
EMC
/Code << /MCID 33 >> BDC
  BT
    1 0 0 1 30 378 Tm
    /F2 8 Tf
    ( only allow strings \(Str\) in the Bag) Tj
    T*
    (my $breakfast = Bag[Str].new\( <spam eggs spam spam bacon spam> \);) Tj
    T*
    [  ] TJ
    T*
    ( only allow whole numbers \(Int\) in the Bag) Tj
    T*
    (my $breakfast = Bag[Int].new\( <spam eggs spam spam bacon spam> \);) Tj
    T*
    ( Type check failed in binding; expected Int but got Str \("spam"\)) Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS9 gs
  /GS10 gs
  28 323.2 562 65.6 re
  B
Q
/P << /MCID 34 >> BDC
  BT
    1 0 0 1 20 303.2 Tm
    /F3 10 Tf
    (Finally, you can create Bag masquerading as a hash by using the ) Tj
  ET
EMC
/P << /MCID 35 >> BDC
  BT
    1 0 0 1 20 303.2 Tm
    /F2 10 Tf
    [ -26329 (is) ] TJ
  ET
EMC
/P << /MCID 36 >> BDC
  BT
    1 0 0 1 20 303.2 Tm
    /F3 10 Tf
    [ -28129 ( trait:) ] TJ
  ET
EMC
/Code << /MCID 37 >> BDC
  BT
    1 0 0 1 30 285.6 Tm
    /F2 8 Tf
    (my %b is Bag = <a b c>;) Tj
    T*
    (say %b<a>;   True) Tj
    T*
    (say %b<d>;   False) Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS11 gs
  /GS12 gs
  28 257.2 562 39.2 re
  B
Q
/P << /MCID 38 >> BDC
  BT
    1 0 0 1 20 237.2 Tm
    /F3 10 Tf
    (Since 6.d \(2019.03 and later\), this syntax also allows you to specify the type of values you would like to allow:) Tj
  ET
EMC
/Code << /MCID 39 >> BDC
  BT
    1 0 0 1 30 219.6 Tm
    /F2 8 Tf
    ( limit to strings) Tj
    T*
    (my %b is Bag[Str] = <a b c>;) Tj
    T*
    (say %b<a>;   True) Tj
    T*
    (say %b<d>;   False) Tj
    T*
    [  ] TJ
    T*
    ( limit to whole numbers) Tj
    T*
    (my %b is Bag[Int] = <a b c>;) Tj
    T*
    ( Type check failed in binding; expected Int but got Str \("a"\)) Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS13 gs
  /GS14 gs
  28 147.2 562 83.2 re
  B
Q
endstream
endobj

10 0 obj
<<
  /Type /Pages
  /Count 6
  /Kids [ 11 0 R 4 0 R 39 0 R 45 0 R 49 0 R 53 0 R ]
>>
endobj

11 0 obj
<<
  /Type /Page
  /Annots [ 12 0 R 14 0 R 16 0 R 17 0 R 19 0 R 21 0 R 23 0 R 25 0 R ]
  /Contents 27 0 R
  /MediaBox [ 0 0 612 792 ]
  /Parent 10 0 R
  /Resources <<
    /ExtGState <<
      /GS1 28 0 R
      /GS2 29 0 R
      /GS3 30 0 R
      /GS4 31 0 R
      /GS5 32 0 R
      /GS6 33 0 R
    >>
    /Font << /F1 34 0 R /F2 35 0 R /F3 37 0 R /F4 38 0 R >>
  >>
  /StructParents 0
>>
endobj

12 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 13 0 R
  /Border [ 0 0 0 ]
  /Contents (Associative)
  /P 11 0 R
  /Rect [ 235.62 625.8 286.28 640.8 ]
>>
endobj

13 0 obj
<< /Type /Action /S /URI /URI (/type/Associative) >>
endobj

14 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 15 0 R
  /Border [ 0 0 0 ]
  /Contents (BagHash)
  /P 11 0 R
  /Rect [ 572.74 614.8 576.74 629.8 ]
>>
endobj

15 0 obj
<< /Type /Action /S /URI /URI (/type/BagHash) >>
endobj

16 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 15 0 R
  /Border [ 0 0 0 ]
  /Contents (BagHash)
  /P 11 0 R
  /Rect [ 18 603.8 58.66 618.8 ]
>>
endobj

17 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 18 0 R
  /Border [ 0 0 0 ]
  /Contents (.pick)
  /P 11 0 R
  /Rect [ 306.38 581.8 330.1 596.8 ]
>>
endobj

18 0 obj
<< /Type /Action /S /URI /URI (/routine/pick) >>
endobj

19 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 20 0 R
  /Border [ 0 0 0 ]
  /Contents (.roll)
  /P 11 0 R
  /Rect [ 350.54 581.8 370.93 596.8 ]
>>
endobj

20 0 obj
<< /Type /Action /S /URI /URI (/routine/roll) >>
endobj

21 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 22 0 R
  /Border [ 0 0 0 ]
  /Contents (===)
  /P 11 0 R
  /Rect [ 498.33 559.8 519.25 574.8 ]
>>
endobj

22 0 obj
<< /Type /Action /S /URI /URI (/routine/===) >>
endobj

23 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 24 0 R
  /Border [ 0 0 0 ]
  /Contents ({ }\n\n postcircumfix operator)
  /P 11 0 R
  /Rect [ 214.74 436.6 329.71 451.6 ]
>>
endobj

24 0 obj
<< /Type /Action /S /URI /URI (/language/operators#postcircumfix_{_}) >>
endobj

25 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 26 0 R
  /Border [ 0 0 0 ]
  /Contents (< > \n\n postcircumfix operator)
  /P 11 0 R
  /Rect [ 361.26 436.6 480.41 451.6 ]
>>
endobj

26 0 obj
<< /Type /Action /S /URI /URI (/language/operators#postcircumfix_<_>) >>
endobj

27 0 obj
<< /Length 5726 >> stream
/H1 << /MCID 0 >> BDC
  BT
    1 0 0 1 20 752 Tm
    /F1 20 Tf
    (class Bag) Tj
    22 TL
    T*
  ET
  q
    1 w
    20 750 m
    98.34 750 l
    S
  Q
EMC
/H2 << /MCID 1 >> BDC
  BT
    1 0 0 1 20 694.8 Tm
    /F1 16 Tf
    (Immutable collection of distinct objects with integer weights) Tj
    17.6 TL
    T*
  ET
EMC
/Code << /MCID 2 >> BDC
  BT
    1 0 0 1 30 659.6 Tm
    /F2 8 Tf
    (class Bag does Baggy { }) Tj
    8.8 TL
    T*
  ET
EMC
q
  0 g
  0 G
  /GS1 gs
  /GS2 gs
  28 648.8 562 21.6 re
  B
Q
/P << /MCID 3 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    /F3 10 Tf
    (A ) Tj
  ET
EMC
/P << /MCID 4 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    /F2 10 Tf
    [ -1222 (Bag) ] TJ
  ET
EMC
/P << /MCID 5 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    /F3 10 Tf
    [ -3622 ( is an immutable bag/multiset implementing ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 6 >> BDC
    BT
      1 0 0 1 20 628.8 Tm
      [ -21762 (Associative) ] TJ
    ET
    q
      0.5 w
      237.62 627.8 m
      284.28 627.8 l
      S
    Q
  EMC
Q
/P << /MCID 7 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    [ -26678 (, meaning a collection of distinct elements in no particular order that each) ] TJ
    11 TL
    T*
    (have an integer weight assigned to them signifying how many copies of that element are considered "in the bag". \(For ) Tj
  ET
EMC
/P << /MCID 8 >> BDC
  BT
    1 0 0 1 20 617.8 Tm
    /F4 10 Tf
    [ -47642 (mutable) ] TJ
  ET
EMC
/P << /MCID 9 >> BDC
  BT
    1 0 0 1 20 617.8 Tm
    /F3 10 Tf
    [ -51114 ( bags, see ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 10 >> BDC
    BT
      1 0 0 1 20 617.8 Tm
      [ -55474 ] TJ
      T*
      (BagHash) Tj
    ET
    q
      0.5 w
      574.74 616.8 m
      574.74 616.8 l
      S
    Q
    q
      0.5 w
      20 605.8 m
      56.66 605.8 l
      S
    Q
  EMC
Q
/P << /MCID 11 >> BDC
  BT
    1 0 0 1 20 606.8 Tm
    [ -3916 ( instead.\)) ] TJ
  ET
EMC
/P << /MCID 12 >> BDC
  BT
    1 0 0 1 20 584.8 Tm
    /F2 10 Tf
    (Bag) Tj
  ET
EMC
/P << /MCID 13 >> BDC
  BT
    1 0 0 1 20 584.8 Tm
    /F3 10 Tf
    [ -2400 (s are often used for performing weighted random selections - see ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 14 >> BDC
    BT
      1 0 0 1 20 584.8 Tm
      [ -28838 (.pick) ] TJ
    ET
    q
      0.5 w
      308.38 583.8 m
      328.1 583.8 l
      S
    Q
  EMC
Q
/P << /MCID 15 >> BDC
  BT
    1 0 0 1 20 584.8 Tm
    [ -31060 ( and ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 16 >> BDC
    BT
      1 0 0 1 20 584.8 Tm
      [ -33254 (.roll) ] TJ
    ET
    q
      0.5 w
      352.54 583.8 m
      368.93 583.8 l
      S
    Q
  EMC
Q
/P << /MCID 17 >> BDC
  BT
    1 0 0 1 20 584.8 Tm
    [ -35143 (.) ] TJ
  ET
EMC
/P << /MCID 18 >> BDC
  BT
    1 0 0 1 20 562.8 Tm
    (Objects/values of any type are allowed as bag elements. Within a ) Tj
  ET
EMC
/P << /MCID 19 >> BDC
  BT
    1 0 0 1 20 562.8 Tm
    /F2 10 Tf
    [ -26578 (Bag) ] TJ
  ET
EMC
/P << /MCID 20 >> BDC
  BT
    1 0 0 1 20 562.8 Tm
    /F3 10 Tf
    [ -28978 (, items that would compare positively with the ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 21 >> BDC
    BT
      1 0 0 1 20 562.8 Tm
      [ -48033 (===) ] TJ
    ET
    q
      0.5 w
      500.33 561.8 m
      517.25 561.8 l
      S
    Q
  EMC
Q
/P << /MCID 22 >> BDC
  BT
    1 0 0 1 20 562.8 Tm
    [ -49975 ( operator are) ] TJ
    T*
    (considered the same element, with the number of how many there are as its weight. But of course you can also easily get back the expanded) Tj
    T*
    (list of items \(without the order\):) Tj
  ET
EMC
/Code << /MCID 23 >> BDC
  BT
    1 0 0 1 30 523.2 Tm
    /F2 8 Tf
    (my $breakfast = bag <spam eggs spam spam bacon spam>;) Tj
    8.8 TL
    T*
    [  ] TJ
    T*
    (say $breakfast.elems;       OUTPUT: «3») Tj
    T*
    (say $breakfast.keys.sort;   OUTPUT: «bacon eggs spam») Tj
    T*
    [  ] TJ
    T*
    (say $breakfast.total;       OUTPUT: «6») Tj
    T*
    (say $breakfast.kxxv.sort;   OUTPUT: «bacon eggs spam spam spam spam») Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS3 gs
  /GS4 gs
  28 459.6 562 74.4 re
  B
Q
/P << /MCID 24 >> BDC
  BT
    1 0 0 1 20 439.6 Tm
    /F2 10 Tf
    (Bag) Tj
  ET
EMC
/P << /MCID 25 >> BDC
  BT
    1 0 0 1 20 439.6 Tm
    /F3 10 Tf
    [ -2400 (s can be treated as object hashes using the ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 26 >> BDC
    BT
      1 0 0 1 20 439.6 Tm
      [ -19674 ({ }   postcircumfix operator) ] TJ
    ET
    q
      0.5 w
      216.74 438.6 m
      327.71 438.6 l
      S
    Q
  EMC
Q
/P << /MCID 27 >> BDC
  BT
    1 0 0 1 20 439.6 Tm
    [ -31021 (, or the ) ] TJ
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 28 >> BDC
    BT
      1 0 0 1 20 439.6 Tm
      [ -34326 (< >    postcircumfix operator) ] TJ
    ET
    q
      0.5 w
      363.26 438.6 m
      478.41 438.6 l
      S
    Q
  EMC
Q
/P << /MCID 29 >> BDC
  BT
    1 0 0 1 20 439.6 Tm
    [ -46091 ( for literal string keys,) ] TJ
    11 TL
    T*
    (which returns the corresponding integer weight for keys that are elements of the bag, and ) Tj
  ET
EMC
/P << /MCID 30 >> BDC
  BT
    1 0 0 1 20 428.6 Tm
    /F2 10 Tf
    [ -36131 (0) ] TJ
  ET
EMC
/P << /MCID 31 >> BDC
  BT
    1 0 0 1 20 428.6 Tm
    /F3 10 Tf
    [ -37331 ( for keys that aren't:) ] TJ
  ET
EMC
/Code << /MCID 32 >> BDC
  BT
    1 0 0 1 30 411 Tm
    /F2 8 Tf
    (my $breakfast = bag <spam eggs spam spam bacon spam>;) Tj
    8.8 TL
    T*
    (say $breakfast<bacon>;     OUTPUT: «1») Tj
    T*
    (say $breakfast<spam>;      OUTPUT: «4») Tj
    T*
    (say $breakfast<sausage>;   OUTPUT: «0») Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS5 gs
  /GS6 gs
  28 373.8 562 48 re
  B
Q
endstream
endobj

28 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

29 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

30 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

31 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

32 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

33 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

34 0 obj
<<
  /Type /Font
  /Subtype /Type1
  /BaseFont /Times-Bold
  /Encoding /WinAnsiEncoding
>>
endobj

35 0 obj
<< /Type /Font /Subtype /Type1 /BaseFont /Courier /Encoding 36 0 R >>
endobj

36 0 obj
<<
  /Type /Encoding
  /BaseEncoding /WinAnsiEncoding
  /Differences [ 1 /numbersign /propersubset /reflexsubset ]
>>
endobj

37 0 obj
<<
  /Type /Font
  /Subtype /Type1
  /BaseFont /Times-Roman
  /Encoding /WinAnsiEncoding
>>
endobj

38 0 obj
<<
  /Type /Font
  /Subtype /Type1
  /BaseFont /Times-Italic
  /Encoding /WinAnsiEncoding
>>
endobj

39 0 obj
<<
  /Type /Page
  /Annots [ 40 0 R ]
  /Contents 42 0 R
  /MediaBox [ 0 0 612 792 ]
  /Parent 10 0 R
  /Resources <<
    /ExtGState << /GS1 43 0 R /GS2 44 0 R >>
    /Font << /F1 34 0 R /F2 37 0 R /F3 35 0 R >>
  >>
  /StructParents 2
>>
endobj

40 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 41 0 R
  /Border [ 0 0 0 ]
  /Contents (Operators with set semantics)
  /P 39 0 R
  /Rect [ 37.44 705 156.7 720 ]
>>
endobj

41 0 obj
<<
  /Type /Action
  /S /URI
  /URI (/language/setbagmix#Operators_with_set_semantics)
>>
endobj

42 0 obj
<< /Length 1631 >> stream
/H1 << /MCID 0 >> BDC
  BT
    1 0 0 1 20 752 Tm
    /F1 20 Tf
    (Operators) Tj
    22 TL
    T*
  ET
  q
    1 w
    20 750 m
    107.76 750 l
    S
  Q
EMC
/P << /MCID 1 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F2 10 Tf
    (See ) Tj
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 2 >> BDC
    BT
      1 0 0 1 20 708 Tm
      [ -1944 (Operators with set semantics) ] TJ
    ET
    q
      0.5 w
      39.44 707 m
      154.7 707 l
      S
    Q
  EMC
Q
/P << /MCID 3 >> BDC
  BT
    1 0 0 1 20 708 Tm
    [ -13720 ( for a complete list of "set operators" applicable to, among other types, ) ] TJ
  ET
EMC
/P << /MCID 4 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F3 10 Tf
    [ -42476 (Bag) ] TJ
  ET
EMC
/P << /MCID 5 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F2 10 Tf
    [ -44876 (.) ] TJ
  ET
EMC
/P << /MCID 6 >> BDC
  BT
    1 0 0 1 20 686 Tm
    (Examples:) Tj
  ET
EMC
/Code << /MCID 7 >> BDC
  BT
    1 0 0 1 30 668.4 Tm
    /F3 8 Tf
    (my \($a, $b\) = bag\(2, 2, 4\), bag\(2, 3, 3, 4\);) Tj
    8.8 TL
    T*
    [  ] TJ
    T*
    (say $a \(<\) $b;    OUTPUT: «False») Tj
    T*
    (say $a \(<=\) $b;   OUTPUT: «False») Tj
    T*
    (say $a \(^\) $b;    OUTPUT: «Bag\(3\(2\) 2\)») Tj
    T*
    (say $a \(+\) $b;    OUTPUT: «Bag\(2\(3\) 4\(2\) 3\(2\)\)») Tj
    T*
    [  ] TJ
    T*
    ( Unicode versions:) Tj
    T*
    (say $a  $b;   OUTPUT: «False») Tj
    T*
    (say $a  $b;   OUTPUT: «False») Tj
    T*
    (say $a  $b;   OUTPUT: «Bag\(3\(2\) 2\)») Tj
    T*
    (say $a  $b;   OUTPUT: «Bag\(2\(3\) 4\(2\) 3\(2\)\)») Tj
    T*
  ET
EMC
q
  0 g
  0 G
  /GS1 gs
  /GS2 gs
  28 560.8 562 118.4 re
  B
Q
endstream
endobj

43 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

44 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

45 0 obj
<<
  /Type /Page
  /Contents 46 0 R
  /MediaBox [ 0 0 612 792 ]
  /Parent 10 0 R
  /Resources <<
    /ExtGState << /GS1 47 0 R /GS2 48 0 R >>
    /Font << /F1 34 0 R /F2 35 0 R /F3 37 0 R >>
  >>
  /StructParents 3
>>
endobj

46 0 obj
<< /Length 948 >> stream
/H1 << /MCID 0 >> BDC
  BT
    1 0 0 1 20 752 Tm
    /F1 20 Tf
    (Subroutines) Tj
    22 TL
    T*
  ET
  q
    1 w
    20 750 m
    123.36 750 l
    S
  Q
EMC
/H2 << /MCID 1 >> BDC
  BT
    1 0 0 1 20 694.8 Tm
    /F1 16 Tf
    (sub bag) Tj
    17.6 TL
    T*
  ET
EMC
/Code << /MCID 2 >> BDC
  BT
    1 0 0 1 30 659.6 Tm
    /F2 8 Tf
    (sub bag\(*@args --> Bag\)) Tj
    8.8 TL
    T*
  ET
EMC
q
  0 g
  0 G
  /GS1 gs
  /GS2 gs
  28 648.8 562 21.6 re
  B
Q
/P << /MCID 3 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    /F3 10 Tf
    (Creates a new ) Tj
  ET
EMC
/P << /MCID 4 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    /F2 10 Tf
    [ -6109 (Bag) ] TJ
  ET
EMC
/P << /MCID 5 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    /F3 10 Tf
    [ -8509 ( from ) ] TJ
  ET
EMC
/P << /MCID 6 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    /F2 10 Tf
    [ -11203 (@args) ] TJ
  ET
EMC
/P << /MCID 7 >> BDC
  BT
    1 0 0 1 20 628.8 Tm
    /F3 10 Tf
    [ -14803 (.) ] TJ
  ET
EMC
endstream
endobj

47 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

48 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

49 0 obj
<<
  /Type /Page
  /Annots [ 50 0 R ]
  /Contents 52 0 R
  /MediaBox [ 0 0 612 792 ]
  /Parent 10 0 R
  /Resources << /Font << /F1 34 0 R /F2 37 0 R /F3 35 0 R >> >>
  /StructParents 4
>>
endobj

50 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 51 0 R
  /Border [ 0 0 0 ]
  /Contents (Any)
  /P 49 0 R
  /Rect [ 142.44 705 163.66 720 ]
>>
endobj

51 0 obj
<< /Type /Action /S /URI /URI (/type/Any#routine_reverse) >>
endobj

52 0 obj
<< /Length 848 >> stream
/H1 << /MCID 0 >> BDC
  BT
    1 0 0 1 20 752 Tm
    /F1 20 Tf
    (Note on reverse and ordering) Tj
    22 TL
    T*
  ET
  q
    1 w
    20 750 m
    269.96 750 l
    S
  Q
EMC
/P << /MCID 1 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F2 10 Tf
    (This method is inherited from ) Tj
  ET
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 2 >> BDC
    BT
      1 0 0 1 20 708 Tm
      [ -12444 (Any) ] TJ
    ET
    q
      0.5 w
      144.44 707 m
      161.66 707 l
      S
    Q
  EMC
Q
/P << /MCID 3 >> BDC
  BT
    1 0 0 1 20 708 Tm
    [ -14416 (, however, ) ] TJ
  ET
EMC
/P << /MCID 4 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F3 10 Tf
    [ -19109 (Mix) ] TJ
  ET
EMC
/P << /MCID 5 >> BDC
  BT
    1 0 0 1 20 708 Tm
    /F2 10 Tf
    [ -21509 (es do not have an inherent order and you should not trust it returning a consistent output.) ] TJ
  ET
EMC
endstream
endobj

53 0 obj
<<
  /Type /Page
  /Annots [ 54 0 R ]
  /Contents 56 0 R
  /MediaBox [ 0 0 612 792 ]
  /Parent 10 0 R
  /Resources << /Font << /F1 34 0 R /F2 37 0 R >> >>
  /StructParents 5
>>
endobj

54 0 obj
<<
  /Type /Annot
  /Subtype /Link
  /A 55 0 R
  /Border [ 0 0 0 ]
  /Contents (Sets, Bags, and Mixes)
  /P 53 0 R
  /Rect [ 18 705 110.61 720 ]
>>
endobj

55 0 obj
<< /Type /Action /S /URI /URI (/language/setbagmix) >>
endobj

56 0 obj
<< /Length 368 >> stream
/H1 << /MCID 0 >> BDC
  BT
    1 0 0 1 20 752 Tm
    /F1 20 Tf
    (See also) Tj
    22 TL
    T*
  ET
  q
    1 w
    20 750 m
    87.22 750 l
    S
  Q
EMC
q
  0 0 1 rg
  0 0 1 RG
  /Link << /MCID 1 >> BDC
    BT
      1 0 0 1 20 708 Tm
      /F2 10 Tf
      (Sets, Bags, and Mixes) Tj
    ET
    q
      0.5 w
      20 707 m
      108.61 707 l
      S
    Q
  EMC
Q
endstream
endobj

57 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

58 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

59 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

60 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

61 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

62 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

63 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

64 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

65 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

66 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

67 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

68 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

69 0 obj
<< /Type /ExtGState /CA 0.25 >>
endobj

70 0 obj
<< /Type /ExtGState /ca 0.1 >>
endobj

71 0 obj
<< /Count 8 /First 72 0 R /Last 323 0 R >>
endobj

72 0 obj
<<
  /Count 2
  /Dest /class_Bag
  /First 73 0 R
  /Last 73 0 R
  /Next 318 0 R
  /SE 78 0 R
  /Title (class Bag)
>>
endobj

73 0 obj
<<
  /Count 1
  /Dest /Immutable_collection_of_distinct_objects_with_integer_weights
  /SE 74 0 R
  /Title (Immutable collection of distinct objects with integer weights)
>>
endobj

74 0 obj
<< /Type /StructElem /S /H2 /K [ 75 0 R ] /P 77 0 R >>
endobj

75 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Immutable collection of distinct objects with integer weights\n)
  /K [ 76 0 R ]
  /P 74 0 R
>>
endobj

76 0 obj
<< /Type /MCR /MCID 1 /Pg 11 0 R >>
endobj

77 0 obj
<<
  /Type /StructElem
  /S /Document
  /K [ 78 0 R 74 0 R 81 0 R 84 0 R 105 0 R 120 0 R 132 0 R 135 0 R 154 0 R 157 0 R 160 0 R 174 0 R 177 0 R 192 0 R 195 0 R 211 0 R 214 0 R 225 0 R 228 0 R 235 0 R 238 0 R 245 0 R 248 0 R 251 0 R 254 0 R 257 0 R 269 0 R 272 0 R 275 0 R 278 0 R 281 0 R 284 0 R 295 0 R 298 0 R 310 0 R 313 0 R ]
  /P 317 0 R
>>
endobj

78 0 obj
<< /Type /StructElem /S /H1 /K [ 79 0 R ] /P 77 0 R >>
endobj

79 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (class Bag\n)
  /K [ 80 0 R ]
  /P 78 0 R
>>
endobj

80 0 obj
<< /Type /MCR /MCID 0 /Pg 11 0 R >>
endobj

81 0 obj
<< /Type /StructElem /S /Code /K [ 82 0 R ] /P 77 0 R >>
endobj

82 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (class Bag does Baggy { }\n)
  /K [ 83 0 R ]
  /P 81 0 R
>>
endobj

83 0 obj
<< /Type /MCR /MCID 2 /Pg 11 0 R >>
endobj

84 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 85 0 R 87 0 R 89 0 R 91 0 R 94 0 R 96 0 R 98 0 R 100 0 R 103 0 R ]
  /P 77 0 R
>>
endobj

85 0 obj
<< /Type /StructElem /S /Span /ActualText (A ) /K [ 86 0 R ] /P 84 0 R >>
endobj

86 0 obj
<< /Type /MCR /MCID 3 /Pg 11 0 R >>
endobj

87 0 obj
<< /Type /StructElem /S /Span /ActualText (Bag) /K [ 88 0 R ] /P 84 0 R >>
endobj

88 0 obj
<< /Type /MCR /MCID 4 /Pg 11 0 R >>
endobj

89 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( is an immutable bag/multiset implementing )
  /K [ 90 0 R ]
  /P 84 0 R
>>
endobj

90 0 obj
<< /Type /MCR /MCID 5 /Pg 11 0 R >>
endobj

91 0 obj
<< /Type /StructElem /S /Link /K [ 92 0 R ] /P 84 0 R >>
endobj

92 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Associative)
  /K [ 93 0 R ]
  /P 91 0 R
>>
endobj

93 0 obj
<< /Type /MCR /MCID 6 /Pg 11 0 R >>
endobj

94 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (, meaning a collection of distinct elements in no particular order that each have an integer weight assigned to them signifying how many copies of that element are considered "in the bag". \(For )
  /K [ 95 0 R ]
  /P 84 0 R
>>
endobj

95 0 obj
<< /Type /MCR /MCID 7 /Pg 11 0 R >>
endobj

96 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (mutable)
  /K [ 97 0 R ]
  /P 84 0 R
>>
endobj

97 0 obj
<< /Type /MCR /MCID 8 /Pg 11 0 R >>
endobj

98 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( bags, see )
  /K [ 99 0 R ]
  /P 84 0 R
>>
endobj

99 0 obj
<< /Type /MCR /MCID 9 /Pg 11 0 R >>
endobj

100 0 obj
<< /Type /StructElem /S /Link /K [ 101 0 R ] /P 84 0 R >>
endobj

101 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (BagHash)
  /K [ 102 0 R ]
  /P 100 0 R
>>
endobj

102 0 obj
<< /Type /MCR /MCID 10 /Pg 11 0 R >>
endobj

103 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( instead.\))
  /K [ 104 0 R ]
  /P 84 0 R
>>
endobj

104 0 obj
<< /Type /MCR /MCID 11 /Pg 11 0 R >>
endobj

105 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 106 0 R 108 0 R 110 0 R 113 0 R 115 0 R 118 0 R ]
  /P 77 0 R
>>
endobj

106 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 107 0 R ]
  /P 105 0 R
>>
endobj

107 0 obj
<< /Type /MCR /MCID 12 /Pg 11 0 R >>
endobj

108 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (s are often used for performing weighted random selections - see )
  /K [ 109 0 R ]
  /P 105 0 R
>>
endobj

109 0 obj
<< /Type /MCR /MCID 13 /Pg 11 0 R >>
endobj

110 0 obj
<< /Type /StructElem /S /Link /K [ 111 0 R ] /P 105 0 R >>
endobj

111 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (.pick)
  /K [ 112 0 R ]
  /P 110 0 R
>>
endobj

112 0 obj
<< /Type /MCR /MCID 14 /Pg 11 0 R >>
endobj

113 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( and )
  /K [ 114 0 R ]
  /P 105 0 R
>>
endobj

114 0 obj
<< /Type /MCR /MCID 15 /Pg 11 0 R >>
endobj

115 0 obj
<< /Type /StructElem /S /Link /K [ 116 0 R ] /P 105 0 R >>
endobj

116 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (.roll)
  /K [ 117 0 R ]
  /P 115 0 R
>>
endobj

117 0 obj
<< /Type /MCR /MCID 16 /Pg 11 0 R >>
endobj

118 0 obj
<< /Type /StructElem /S /Span /ActualText (.) /K [ 119 0 R ] /P 105 0 R >>
endobj

119 0 obj
<< /Type /MCR /MCID 17 /Pg 11 0 R >>
endobj

120 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 121 0 R 123 0 R 125 0 R 127 0 R 130 0 R ]
  /P 77 0 R
>>
endobj

121 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Objects/values of any type are allowed as bag elements. Within a )
  /K [ 122 0 R ]
  /P 120 0 R
>>
endobj

122 0 obj
<< /Type /MCR /MCID 18 /Pg 11 0 R >>
endobj

123 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 124 0 R ]
  /P 120 0 R
>>
endobj

124 0 obj
<< /Type /MCR /MCID 19 /Pg 11 0 R >>
endobj

125 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (, items that would compare positively with the )
  /K [ 126 0 R ]
  /P 120 0 R
>>
endobj

126 0 obj
<< /Type /MCR /MCID 20 /Pg 11 0 R >>
endobj

127 0 obj
<< /Type /StructElem /S /Link /K [ 128 0 R ] /P 120 0 R >>
endobj

128 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (===)
  /K [ 129 0 R ]
  /P 127 0 R
>>
endobj

129 0 obj
<< /Type /MCR /MCID 21 /Pg 11 0 R >>
endobj

130 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( operator are considered the same element, with the number of how many there are as its weight. But of course you can also easily get back the expanded list of items \(without the order\):)
  /K [ 131 0 R ]
  /P 120 0 R
>>
endobj

131 0 obj
<< /Type /MCR /MCID 22 /Pg 11 0 R >>
endobj

132 0 obj
<< /Type /StructElem /S /Code /K [ 133 0 R ] /P 77 0 R >>
endobj

133 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (þÿ m y   $ b r e a k f a s t   =   b a g   < s p a m   e g g s   s p a m   s p a m   b a c o n   s p a m > ; \n \n s a y   $ b r e a k f a s t . e l e m s ;             #   O U T P U T :   « 3$$ » \n s a y   $ b r e a k f a s t . k e y s . s o r t ;     #   O U T P U T :   « b a c o n   e g g s   s p a m$$ » \n \n s a y   $ b r e a k f a s t . t o t a l ;             #   O U T P U T :   « 6$$ » \n s a y   $ b r e a k f a s t . k x x v . s o r t ;     #   O U T P U T :   « b a c o n   e g g s   s p a m   s p a m   s p a m   s p a m$$ » \n)
  /K [ 134 0 R ]
  /P 132 0 R
>>
endobj

134 0 obj
<< /Type /MCR /MCID 23 /Pg 11 0 R >>
endobj

135 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 136 0 R 138 0 R 140 0 R 143 0 R 145 0 R 148 0 R 150 0 R 152 0 R ]
  /P 77 0 R
>>
endobj

136 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 137 0 R ]
  /P 135 0 R
>>
endobj

137 0 obj
<< /Type /MCR /MCID 24 /Pg 11 0 R >>
endobj

138 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (s can be treated as object hashes using the )
  /K [ 139 0 R ]
  /P 135 0 R
>>
endobj

139 0 obj
<< /Type /MCR /MCID 25 /Pg 11 0 R >>
endobj

140 0 obj
<< /Type /StructElem /S /Link /K [ 141 0 R ] /P 135 0 R >>
endobj

141 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ({ }\n\n postcircumfix operator)
  /K [ 142 0 R ]
  /P 140 0 R
>>
endobj

142 0 obj
<< /Type /MCR /MCID 26 /Pg 11 0 R >>
endobj

143 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (, or the )
  /K [ 144 0 R ]
  /P 135 0 R
>>
endobj

144 0 obj
<< /Type /MCR /MCID 27 /Pg 11 0 R >>
endobj

145 0 obj
<< /Type /StructElem /S /Link /K [ 146 0 R ] /P 135 0 R >>
endobj

146 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (< > \n\n postcircumfix operator)
  /K [ 147 0 R ]
  /P 145 0 R
>>
endobj

147 0 obj
<< /Type /MCR /MCID 28 /Pg 11 0 R >>
endobj

148 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( for literal string keys, which returns the corresponding integer weight for keys that are elements of the bag, and )
  /K [ 149 0 R ]
  /P 135 0 R
>>
endobj

149 0 obj
<< /Type /MCR /MCID 29 /Pg 11 0 R >>
endobj

150 0 obj
<< /Type /StructElem /S /Span /ActualText (0) /K [ 151 0 R ] /P 135 0 R >>
endobj

151 0 obj
<< /Type /MCR /MCID 30 /Pg 11 0 R >>
endobj

152 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( for keys that aren't:)
  /K [ 153 0 R ]
  /P 135 0 R
>>
endobj

153 0 obj
<< /Type /MCR /MCID 31 /Pg 11 0 R >>
endobj

154 0 obj
<< /Type /StructElem /S /Code /K [ 155 0 R ] /P 77 0 R >>
endobj

155 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (þÿ m y   $ b r e a k f a s t   =   b a g   < s p a m   e g g s   s p a m   s p a m   b a c o n   s p a m > ; \n s a y   $ b r e a k f a s t < b a c o n > ;         #   O U T P U T :   « 1$$ » \n s a y   $ b r e a k f a s t < s p a m > ;           #   O U T P U T :   « 4$$ » \n s a y   $ b r e a k f a s t < s a u s a g e > ;     #   O U T P U T :   « 0$$ » \n)
  /K [ 156 0 R ]
  /P 154 0 R
>>
endobj

156 0 obj
<< /Type /MCR /MCID 32 /Pg 11 0 R >>
endobj

157 0 obj
<< /Type /StructElem /S /H1 /K [ 158 0 R ] /P 77 0 R >>
endobj

158 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Creating Bag objects\n)
  /K [ 159 0 R ]
  /P 157 0 R
>>
endobj

159 0 obj
<< /Type /MCR /MCID 0 /Pg 4 0 R >>
endobj

160 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 161 0 R 163 0 R 165 0 R 168 0 R 170 0 R 172 0 R ]
  /P 77 0 R
>>
endobj

161 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 162 0 R ]
  /P 160 0 R
>>
endobj

162 0 obj
<< /Type /MCR /MCID 1 /Pg 4 0 R >>
endobj

163 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (s can be composed using the )
  /K [ 164 0 R ]
  /P 160 0 R
>>
endobj

164 0 obj
<< /Type /MCR /MCID 2 /Pg 4 0 R >>
endobj

165 0 obj
<< /Type /StructElem /S /Link /K [ 166 0 R ] /P 160 0 R >>
endobj

166 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (bag)
  /K [ 167 0 R ]
  /P 165 0 R
>>
endobj

167 0 obj
<< /Type /MCR /MCID 3 /Pg 4 0 R >>
endobj

168 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( subroutine \(or )
  /K [ 169 0 R ]
  /P 160 0 R
>>
endobj

169 0 obj
<< /Type /MCR /MCID 4 /Pg 4 0 R >>
endobj

170 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag.new)
  /K [ 171 0 R ]
  /P 160 0 R
>>
endobj

171 0 obj
<< /Type /MCR /MCID 5 /Pg 4 0 R >>
endobj

172 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (, for which it is a shorthand\). Any positional parameters, regardless of their type, become elements of the bag:)
  /K [ 173 0 R ]
  /P 160 0 R
>>
endobj

173 0 obj
<< /Type /MCR /MCID 6 /Pg 4 0 R >>
endobj

174 0 obj
<< /Type /StructElem /S /Code /K [ 175 0 R ] /P 77 0 R >>
endobj

175 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (þÿ m y   $ n   =   b a g   " a "   = >   0 ,   " b "   = >   1 ,   " c "   = >   2 ,   " c "   = >   2 ; \n s a y   $ n . k e y s . r a k u ;                 #   O U T P U T :   « \( : c \( 2 \) ,   : b \( 1 \) ,   : a \( 0 \) \) . S e q$$ » \n s a y   $ n . k e y s . m a p \( & W H A T \) ;     #   O U T P U T :   « \( \( P a i r \)   \( P a i r \)   \( P a i r \) \)$$ » \n s a y   $ n . v a l u e s . r a k u ;             #   O U T P U T :   « \( 2 ,   1 ,   1 \) . S e q$$ » \n)
  /K [ 176 0 R ]
  /P 174 0 R
>>
endobj

176 0 obj
<< /Type /MCR /MCID 7 /Pg 4 0 R >>
endobj

177 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 178 0 R 180 0 R 182 0 R 184 0 R 186 0 R 188 0 R 190 0 R ]
  /P 77 0 R
>>
endobj

178 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Alternatively, the )
  /K [ 179 0 R ]
  /P 177 0 R
>>
endobj

179 0 obj
<< /Type /MCR /MCID 8 /Pg 4 0 R >>
endobj

180 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (.Bag)
  /K [ 181 0 R ]
  /P 177 0 R
>>
endobj

181 0 obj
<< /Type /MCR /MCID 9 /Pg 4 0 R >>
endobj

182 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( coercer \(or its functional form, )
  /K [ 183 0 R ]
  /P 177 0 R
>>
endobj

183 0 obj
<< /Type /MCR /MCID 10 /Pg 4 0 R >>
endobj

184 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag\(\))
  /K [ 185 0 R ]
  /P 177 0 R
>>
endobj

185 0 obj
<< /Type /MCR /MCID 11 /Pg 4 0 R >>
endobj

186 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (\) can be called on an existing object to coerce it to a )
  /K [ 187 0 R ]
  /P 177 0 R
>>
endobj

187 0 obj
<< /Type /MCR /MCID 12 /Pg 4 0 R >>
endobj

188 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 189 0 R ]
  /P 177 0 R
>>
endobj

189 0 obj
<< /Type /MCR /MCID 13 /Pg 4 0 R >>
endobj

190 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (. Its semantics depend on the type and contents of the object. In general it evaluates the object in list context and creates a bag with the resulting items as elements, although for Hash-like objects or Pair items, only the keys become elements of the bag, and the \(cumulative\) values become the associated integer weights:)
  /K [ 191 0 R ]
  /P 177 0 R
>>
endobj

191 0 obj
<< /Type /MCR /MCID 14 /Pg 4 0 R >>
endobj

192 0 obj
<< /Type /StructElem /S /Code /K [ 193 0 R ] /P 77 0 R >>
endobj

193 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (þÿ m y   $ n   =   \( " a "   = >   0 ,   " b "   = >   1 ,   " c "   = >   2 ,   " c "   = >   2 \) . B a g ; \n s a y   $ n . k e y s . r a k u ;                 #   O U T P U T :   « \( " b " ,   " c " \) . S e q$$ » \n s a y   $ n . k e y s . m a p \( & W H A T \) ;     #   O U T P U T :   « \( \( S t r \)   \( S t r \) \)$$ » \n s a y   $ n . v a l u e s . r a k u ;             #   O U T P U T :   « \( 1 ,   4 \) . S e q$$ » \n)
  /K [ 194 0 R ]
  /P 192 0 R
>>
endobj

194 0 obj
<< /Type /MCR /MCID 15 /Pg 4 0 R >>
endobj

195 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 196 0 R 198 0 R 200 0 R 202 0 R 205 0 R 207 0 R 209 0 R ]
  /P 77 0 R
>>
endobj

196 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Furthermore, you can get a )
  /K [ 197 0 R ]
  /P 195 0 R
>>
endobj

197 0 obj
<< /Type /MCR /MCID 16 /Pg 4 0 R >>
endobj

198 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 199 0 R ]
  /P 195 0 R
>>
endobj

199 0 obj
<< /Type /MCR /MCID 17 /Pg 4 0 R >>
endobj

200 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( by using bag operators \(see next section\) on objects of other types such as )
  /K [ 201 0 R ]
  /P 195 0 R
>>
endobj

201 0 obj
<< /Type /MCR /MCID 18 /Pg 4 0 R >>
endobj

202 0 obj
<< /Type /StructElem /S /Link /K [ 203 0 R ] /P 195 0 R >>
endobj

203 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (List)
  /K [ 204 0 R ]
  /P 202 0 R
>>
endobj

204 0 obj
<< /Type /MCR /MCID 19 /Pg 4 0 R >>
endobj

205 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (, which will act like they internally call )
  /K [ 206 0 R ]
  /P 195 0 R
>>
endobj

206 0 obj
<< /Type /MCR /MCID 20 /Pg 4 0 R >>
endobj

207 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (.Bag)
  /K [ 208 0 R ]
  /P 195 0 R
>>
endobj

208 0 obj
<< /Type /MCR /MCID 21 /Pg 4 0 R >>
endobj

209 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( on them before performing the operation. Be aware of the tight precedence of those operators though, which may require you to use parentheses around arguments:)
  /K [ 210 0 R ]
  /P 195 0 R
>>
endobj

210 0 obj
<< /Type /MCR /MCID 22 /Pg 4 0 R >>
endobj

211 0 obj
<< /Type /StructElem /S /Code /K [ 212 0 R ] /P 77 0 R >>
endobj

212 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (þÿ s a y   \( 1 . . 5 \)   \( + \)   4 ;     #   O U T P U T :   « B a g \( 1   2   3   4 \( 2 \)   5 \)$$ » \n)
  /K [ 213 0 R ]
  /P 211 0 R
>>
endobj

213 0 obj
<< /Type /MCR /MCID 23 /Pg 4 0 R >>
endobj

214 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 215 0 R 217 0 R 219 0 R 221 0 R 223 0 R ]
  /P 77 0 R
>>
endobj

215 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Of course, you can also create a )
  /K [ 216 0 R ]
  /P 214 0 R
>>
endobj

216 0 obj
<< /Type /MCR /MCID 24 /Pg 4 0 R >>
endobj

217 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 218 0 R ]
  /P 214 0 R
>>
endobj

218 0 obj
<< /Type /MCR /MCID 25 /Pg 4 0 R >>
endobj

219 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( with the )
  /K [ 220 0 R ]
  /P 214 0 R
>>
endobj

220 0 obj
<< /Type /MCR /MCID 26 /Pg 4 0 R >>
endobj

221 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (.new)
  /K [ 222 0 R ]
  /P 214 0 R
>>
endobj

222 0 obj
<< /Type /MCR /MCID 27 /Pg 4 0 R >>
endobj

223 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( method.)
  /K [ 224 0 R ]
  /P 214 0 R
>>
endobj

224 0 obj
<< /Type /MCR /MCID 28 /Pg 4 0 R >>
endobj

225 0 obj
<< /Type /StructElem /S /Code /K [ 226 0 R ] /P 77 0 R >>
endobj

226 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (my $breakfast = Bag.new\( <spam eggs spam spam bacon spam> \);\n)
  /K [ 227 0 R ]
  /P 225 0 R
>>
endobj

227 0 obj
<< /Type /MCR /MCID 29 /Pg 4 0 R >>
endobj

228 0 obj
<< /Type /StructElem /S /P /K [ 229 0 R 231 0 R 233 0 R ] /P 77 0 R >>
endobj

229 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Since 6.d \(2019.03 and later\) you can also use this syntax for parameterization of the )
  /K [ 230 0 R ]
  /P 228 0 R
>>
endobj

230 0 obj
<< /Type /MCR /MCID 30 /Pg 4 0 R >>
endobj

231 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 232 0 R ]
  /P 228 0 R
>>
endobj

232 0 obj
<< /Type /MCR /MCID 31 /Pg 4 0 R >>
endobj

233 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (, to specify which type of values are acceptable:)
  /K [ 234 0 R ]
  /P 228 0 R
>>
endobj

234 0 obj
<< /Type /MCR /MCID 32 /Pg 4 0 R >>
endobj

235 0 obj
<< /Type /StructElem /S /Code /K [ 236 0 R ] /P 77 0 R >>
endobj

236 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (# only allow strings \(Str\) in the Bag\nmy $breakfast = Bag[Str].new\( <spam eggs spam spam bacon spam> \);\n\n# only allow whole numbers \(Int\) in the Bag\nmy $breakfast = Bag[Int].new\( <spam eggs spam spam bacon spam> \);\n# Type check failed in binding; expected Int but got Str \("spam"\)\n)
  /K [ 237 0 R ]
  /P 235 0 R
>>
endobj

237 0 obj
<< /Type /MCR /MCID 33 /Pg 4 0 R >>
endobj

238 0 obj
<< /Type /StructElem /S /P /K [ 239 0 R 241 0 R 243 0 R ] /P 77 0 R >>
endobj

239 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Finally, you can create Bag masquerading as a hash by using the )
  /K [ 240 0 R ]
  /P 238 0 R
>>
endobj

240 0 obj
<< /Type /MCR /MCID 34 /Pg 4 0 R >>
endobj

241 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (is)
  /K [ 242 0 R ]
  /P 238 0 R
>>
endobj

242 0 obj
<< /Type /MCR /MCID 35 /Pg 4 0 R >>
endobj

243 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( trait:)
  /K [ 244 0 R ]
  /P 238 0 R
>>
endobj

244 0 obj
<< /Type /MCR /MCID 36 /Pg 4 0 R >>
endobj

245 0 obj
<< /Type /StructElem /S /Code /K [ 246 0 R ] /P 77 0 R >>
endobj

246 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (my %b is Bag = <a b c>;\nsay %b<a>;  # True\nsay %b<d>;  # False\n)
  /K [ 247 0 R ]
  /P 245 0 R
>>
endobj

247 0 obj
<< /Type /MCR /MCID 37 /Pg 4 0 R >>
endobj

248 0 obj
<< /Type /StructElem /S /P /K [ 249 0 R ] /P 77 0 R >>
endobj

249 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Since 6.d \(2019.03 and later\), this syntax also allows you to specify the type of values you would like to allow:)
  /K [ 250 0 R ]
  /P 248 0 R
>>
endobj

250 0 obj
<< /Type /MCR /MCID 38 /Pg 4 0 R >>
endobj

251 0 obj
<< /Type /StructElem /S /Code /K [ 252 0 R ] /P 77 0 R >>
endobj

252 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (# limit to strings\nmy %b is Bag[Str] = <a b c>;\nsay %b<a>;  # True\nsay %b<d>;  # False\n\n# limit to whole numbers\nmy %b is Bag[Int] = <a b c>;\n# Type check failed in binding; expected Int but got Str \("a"\)\n)
  /K [ 253 0 R ]
  /P 251 0 R
>>
endobj

253 0 obj
<< /Type /MCR /MCID 39 /Pg 4 0 R >>
endobj

254 0 obj
<< /Type /StructElem /S /H1 /K [ 255 0 R ] /P 77 0 R >>
endobj

255 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Operators\n)
  /K [ 256 0 R ]
  /P 254 0 R
>>
endobj

256 0 obj
<< /Type /MCR /MCID 0 /Pg 39 0 R >>
endobj

257 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 258 0 R 260 0 R 263 0 R 265 0 R 267 0 R ]
  /P 77 0 R
>>
endobj

258 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (See )
  /K [ 259 0 R ]
  /P 257 0 R
>>
endobj

259 0 obj
<< /Type /MCR /MCID 1 /Pg 39 0 R >>
endobj

260 0 obj
<< /Type /StructElem /S /Link /K [ 261 0 R ] /P 257 0 R >>
endobj

261 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Operators with set semantics)
  /K [ 262 0 R ]
  /P 260 0 R
>>
endobj

262 0 obj
<< /Type /MCR /MCID 2 /Pg 39 0 R >>
endobj

263 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( for a complete list of "set operators" applicable to, among other types, )
  /K [ 264 0 R ]
  /P 257 0 R
>>
endobj

264 0 obj
<< /Type /MCR /MCID 3 /Pg 39 0 R >>
endobj

265 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 266 0 R ]
  /P 257 0 R
>>
endobj

266 0 obj
<< /Type /MCR /MCID 4 /Pg 39 0 R >>
endobj

267 0 obj
<< /Type /StructElem /S /Span /ActualText (.) /K [ 268 0 R ] /P 257 0 R >>
endobj

268 0 obj
<< /Type /MCR /MCID 5 /Pg 39 0 R >>
endobj

269 0 obj
<< /Type /StructElem /S /P /K [ 270 0 R ] /P 77 0 R >>
endobj

270 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Examples:)
  /K [ 271 0 R ]
  /P 269 0 R
>>
endobj

271 0 obj
<< /Type /MCR /MCID 6 /Pg 39 0 R >>
endobj

272 0 obj
<< /Type /StructElem /S /Code /K [ 273 0 R ] /P 77 0 R >>
endobj

273 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (þÿ m y   \( $ a ,   $ b \)   =   b a g \( 2 ,   2 ,   4 \) ,   b a g \( 2 ,   3 ,   3 ,   4 \) ; \n \n s a y   $ a   \( < \)   $ b ;       #   O U T P U T :   « F a l s e$$ » \n s a y   $ a   \( < = \)   $ b ;     #   O U T P U T :   « F a l s e$$ » \n s a y   $ a   \( ^ \)   $ b ;       #   O U T P U T :   « B a g \( 3 \( 2 \)   2 \)$$ » \n s a y   $ a   \( + \)   $ b ;       #   O U T P U T :   « B a g \( 2 \( 3 \)   4 \( 2 \)   3 \( 2 \) \)$$ » \n \n #   U n i c o d e   v e r s i o n s : \n s a y   $ a  "   $ b ;     #   O U T P U T :   « F a l s e$$ » \n s a y   $ a  "   $ b ;     #   O U T P U T :   « F a l s e$$ » \n s a y   $ a  "   $ b ;     #   O U T P U T :   « B a g \( 3 \( 2 \)   2 \)$$ » \n s a y   $ a  "   $ b ;     #   O U T P U T :   « B a g \( 2 \( 3 \)   4 \( 2 \)   3 \( 2 \) \)$$ » \n)
  /K [ 274 0 R ]
  /P 272 0 R
>>
endobj

274 0 obj
<< /Type /MCR /MCID 7 /Pg 39 0 R >>
endobj

275 0 obj
<< /Type /StructElem /S /H1 /K [ 276 0 R ] /P 77 0 R >>
endobj

276 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Subroutines\n)
  /K [ 277 0 R ]
  /P 275 0 R
>>
endobj

277 0 obj
<< /Type /MCR /MCID 0 /Pg 45 0 R >>
endobj

278 0 obj
<< /Type /StructElem /S /H2 /K [ 279 0 R ] /P 77 0 R >>
endobj

279 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (sub bag\n)
  /K [ 280 0 R ]
  /P 278 0 R
>>
endobj

280 0 obj
<< /Type /MCR /MCID 1 /Pg 45 0 R >>
endobj

281 0 obj
<< /Type /StructElem /S /Code /K [ 282 0 R ] /P 77 0 R >>
endobj

282 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (sub bag\(*@args --> Bag\)\n)
  /K [ 283 0 R ]
  /P 281 0 R
>>
endobj

283 0 obj
<< /Type /MCR /MCID 2 /Pg 45 0 R >>
endobj

284 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 285 0 R 287 0 R 289 0 R 291 0 R 293 0 R ]
  /P 77 0 R
>>
endobj

285 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Creates a new )
  /K [ 286 0 R ]
  /P 284 0 R
>>
endobj

286 0 obj
<< /Type /MCR /MCID 3 /Pg 45 0 R >>
endobj

287 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Bag)
  /K [ 288 0 R ]
  /P 284 0 R
>>
endobj

288 0 obj
<< /Type /MCR /MCID 4 /Pg 45 0 R >>
endobj

289 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText ( from )
  /K [ 290 0 R ]
  /P 284 0 R
>>
endobj

290 0 obj
<< /Type /MCR /MCID 5 /Pg 45 0 R >>
endobj

291 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (@args)
  /K [ 292 0 R ]
  /P 284 0 R
>>
endobj

292 0 obj
<< /Type /MCR /MCID 6 /Pg 45 0 R >>
endobj

293 0 obj
<< /Type /StructElem /S /Span /ActualText (.) /K [ 294 0 R ] /P 284 0 R >>
endobj

294 0 obj
<< /Type /MCR /MCID 7 /Pg 45 0 R >>
endobj

295 0 obj
<< /Type /StructElem /S /H1 /K [ 296 0 R ] /P 77 0 R >>
endobj

296 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Note on reverse and ordering\n)
  /K [ 297 0 R ]
  /P 295 0 R
>>
endobj

297 0 obj
<< /Type /MCR /MCID 0 /Pg 49 0 R >>
endobj

298 0 obj
<<
  /Type /StructElem
  /S /P
  /K [ 299 0 R 301 0 R 304 0 R 306 0 R 308 0 R ]
  /P 77 0 R
>>
endobj

299 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (This method is inherited from )
  /K [ 300 0 R ]
  /P 298 0 R
>>
endobj

300 0 obj
<< /Type /MCR /MCID 1 /Pg 49 0 R >>
endobj

301 0 obj
<< /Type /StructElem /S /Link /K [ 302 0 R ] /P 298 0 R >>
endobj

302 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Any)
  /K [ 303 0 R ]
  /P 301 0 R
>>
endobj

303 0 obj
<< /Type /MCR /MCID 2 /Pg 49 0 R >>
endobj

304 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (, however, )
  /K [ 305 0 R ]
  /P 298 0 R
>>
endobj

305 0 obj
<< /Type /MCR /MCID 3 /Pg 49 0 R >>
endobj

306 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Mix)
  /K [ 307 0 R ]
  /P 298 0 R
>>
endobj

307 0 obj
<< /Type /MCR /MCID 4 /Pg 49 0 R >>
endobj

308 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (es do not have an inherent order and you should not trust it returning a consistent output.)
  /K [ 309 0 R ]
  /P 298 0 R
>>
endobj

309 0 obj
<< /Type /MCR /MCID 5 /Pg 49 0 R >>
endobj

310 0 obj
<< /Type /StructElem /S /H1 /K [ 311 0 R ] /P 77 0 R >>
endobj

311 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (See also\n)
  /K [ 312 0 R ]
  /P 310 0 R
>>
endobj

312 0 obj
<< /Type /MCR /MCID 0 /Pg 53 0 R >>
endobj

313 0 obj
<< /Type /StructElem /S /P /K [ 314 0 R ] /P 77 0 R >>
endobj

314 0 obj
<< /Type /StructElem /S /Link /K [ 315 0 R ] /P 313 0 R >>
endobj

315 0 obj
<<
  /Type /StructElem
  /S /Span
  /ActualText (Sets, Bags, and Mixes)
  /K [ 316 0 R ]
  /P 314 0 R
>>
endobj

316 0 obj
<< /Type /MCR /MCID 1 /Pg 53 0 R >>
endobj

317 0 obj
<<
  /Type /StructTreeRoot
  /K [ 77 0 R ]
  /ParentTree <<
    /Nums [ 0 [ 79 0 R 75 0 R 82 0 R 85 0 R 87 0 R 89 0 R 92 0 R 94 0 R 96 0 R 98 0 R 101 0 R 103 0 R 106 0 R 108 0 R 111 0 R 113 0 R 116 0 R 118 0 R 121 0 R 123 0 R 125 0 R 128 0 R 130 0 R 133 0 R 136 0 R 138 0 R 141 0 R 143 0 R 146 0 R 148 0 R 150 0 R 152 0 R 155 0 R ] 1 [ 158 0 R 161 0 R 163 0 R 166 0 R 168 0 R 170 0 R 172 0 R 175 0 R 178 0 R 180 0 R 182 0 R 184 0 R 186 0 R 188 0 R 190 0 R 193 0 R 196 0 R 198 0 R 200 0 R 203 0 R 205 0 R 207 0 R 209 0 R 212 0 R 215 0 R 217 0 R 219 0 R 221 0 R 223 0 R 226 0 R 229 0 R 231 0 R 233 0 R 236 0 R 239 0 R 241 0 R 243 0 R 246 0 R 249 0 R 252 0 R ] 2 [ 255 0 R 258 0 R 261 0 R 263 0 R 265 0 R 267 0 R 270 0 R 273 0 R ] 3 [ 276 0 R 279 0 R 282 0 R 285 0 R 287 0 R 289 0 R 291 0 R 293 0 R ] 4 [ 296 0 R 299 0 R 302 0 R 304 0 R 306 0 R 308 0 R ] 5 [ 311 0 R 315 0 R ] ]
  >>
>>
endobj

318 0 obj
<<
  /Count 1
  /Dest /Creating_Bag_objects
  /Next 319 0 R
  /Prev 72 0 R
  /SE 157 0 R
  /Title (Creating Bag objects)
>>
endobj

319 0 obj
<<
  /Count 1
  /Dest /Operators
  /Next 320 0 R
  /Prev 318 0 R
  /SE 254 0 R
  /Title (Operators)
>>
endobj

320 0 obj
<<
  /Count 2
  /Dest /Subroutines
  /First 321 0 R
  /Last 321 0 R
  /Next 322 0 R
  /Prev 319 0 R
  /SE 275 0 R
  /Title (Subroutines)
>>
endobj

321 0 obj
<< /Count 1 /Dest /sub_bag /SE 278 0 R /Title (sub bag) >>
endobj

322 0 obj
<<
  /Count 1
  /Dest /Note_on_reverse_and_ordering
  /Next 323 0 R
  /Prev 320 0 R
  /SE 295 0 R
  /Title (Note on reverse and ordering)
>>
endobj

323 0 obj
<< /Count 1 /Dest /See_also /Prev 322 0 R /SE 310 0 R /Title (See also) >>
endobj

xref
0 324
0000000000 65535 f 
0000000015 00000 n 
0000000242 00000 n 
0000000388 00000 n 
0000000774 00000 n 
0000001270 00000 n 
0000001418 00000 n 
0000001475 00000 n 
0000001628 00000 n 
0000001690 00000 n 
0000009051 00000 n 
0000009153 00000 n 
0000009557 00000 n 
0000009720 00000 n 
0000009790 00000 n 
0000009949 00000 n 
0000010015 00000 n 
0000010169 00000 n 
0000010325 00000 n 
0000010391 00000 n 
0000010548 00000 n 
0000010614 00000 n 
0000010769 00000 n 
0000010834 00000 n 
0000011016 00000 n 
0000011106 00000 n 
0000011289 00000 n 
0000011379 00000 n 
0000017159 00000 n 
0000017207 00000 n 
0000017256 00000 n 
0000017304 00000 n 
0000017353 00000 n 
0000017401 00000 n 
0000017450 00000 n 
0000017558 00000 n 
0000017645 00000 n 
0000017780 00000 n 
0000017889 00000 n 
0000017999 00000 n 
0000018255 00000 n 
0000018429 00000 n 
0000018536 00000 n 
0000020221 00000 n 
0000020269 00000 n 
0000020318 00000 n 
0000020553 00000 n 
0000021554 00000 n 
0000021602 00000 n 
0000021651 00000 n 
0000021856 00000 n 
0000022007 00000 n 
0000022085 00000 n 
0000022986 00000 n 
0000023180 00000 n 
0000023345 00000 n 
0000023417 00000 n 
0000023838 00000 n 
0000023886 00000 n 
0000023935 00000 n 
0000023983 00000 n 
0000024032 00000 n 
0000024080 00000 n 
0000024129 00000 n 
0000024178 00000 n 
0000024226 00000 n 
0000024275 00000 n 
0000024323 00000 n 
0000024372 00000 n 
0000024420 00000 n 
0000024469 00000 n 
0000024517 00000 n 
0000024577 00000 n 
0000024711 00000 n 
0000024902 00000 n 
0000024974 00000 n 
0000025136 00000 n 
0000025189 00000 n 
0000025553 00000 n 
0000025625 00000 n 
0000025735 00000 n 
0000025788 00000 n 
0000025862 00000 n 
0000025987 00000 n 
0000026040 00000 n 
0000026177 00000 n 
0000026268 00000 n 
0000026321 00000 n 
0000026413 00000 n 
0000026466 00000 n 
0000026608 00000 n 
0000026661 00000 n 
0000026735 00000 n 
0000026845 00000 n 
0000026898 00000 n 
0000027192 00000 n 
0000027245 00000 n 
0000027351 00000 n 
0000027404 00000 n 
0000027514 00000 n 
0000027567 00000 n 
0000027643 00000 n 
0000027752 00000 n 
0000027807 00000 n 
0000027919 00000 n 
0000027974 00000 n 
0000028095 00000 n 
0000028200 00000 n 
0000028255 00000 n 
0000028422 00000 n 
0000028477 00000 n 
0000028554 00000 n 
0000028661 00000 n 
0000028716 00000 n 
0000028823 00000 n 
0000028878 00000 n 
0000028955 00000 n 
0000029062 00000 n 
0000029117 00000 n 
0000029210 00000 n 
0000029265 00000 n 
0000029378 00000 n 
0000029545 00000 n 
0000029600 00000 n 
0000029705 00000 n 
0000029760 00000 n 
0000029909 00000 n 
0000029964 00000 n 
0000030041 00000 n 
0000030146 00000 n 
0000030201 00000 n 
0000030491 00000 n 
0000030546 00000 n 
0000030622 00000 n 
0000031267 00000 n 
0000031322 00000 n 
0000031459 00000 n 
0000031564 00000 n 
0000031619 00000 n 
0000031765 00000 n 
0000031820 00000 n 
0000031897 00000 n 
0000032029 00000 n 
0000032084 00000 n 
0000032195 00000 n 
0000032250 00000 n 
0000032327 00000 n 
0000032460 00000 n 
0000032515 00000 n 
0000032733 00000 n 
0000032788 00000 n 
0000032881 00000 n 
0000032936 00000 n 
0000033060 00000 n 
0000033115 00000 n 
0000033191 00000 n 
0000033653 00000 n 
0000033708 00000 n 
0000033782 00000 n 
0000033906 00000 n 
0000033959 00000 n 
0000034080 00000 n 
0000034185 00000 n 
0000034238 00000 n 
0000034368 00000 n 
0000034421 00000 n 
0000034498 00000 n 
0000034603 00000 n 
0000034656 00000 n 
0000034775 00000 n 
0000034828 00000 n 
0000034937 00000 n 
0000034990 00000 n 
0000035205 00000 n 
0000035258 00000 n 
0000035334 00000 n 
0000035920 00000 n 
0000035973 00000 n 
0000036102 00000 n 
0000036223 00000 n 
0000036276 00000 n 
0000036382 00000 n 
0000036435 00000 n 
0000036572 00000 n 
0000036626 00000 n 
0000036735 00000 n 
0000036789 00000 n 
0000036948 00000 n 
0000037002 00000 n 
0000037107 00000 n 
0000037161 00000 n 
0000037589 00000 n 
0000037643 00000 n 
0000037719 00000 n 
0000038257 00000 n 
0000038311 00000 n 
0000038440 00000 n 
0000038569 00000 n 
0000038623 00000 n 
0000038728 00000 n 
0000038782 00000 n 
0000038963 00000 n 
0000039017 00000 n 
0000039094 00000 n 
0000039200 00000 n 
0000039254 00000 n 
0000039399 00000 n 
0000039453 00000 n 
0000039559 00000 n 
0000039613 00000 n 
0000039875 00000 n 
0000039929 00000 n 
0000040005 00000 n 
0000040218 00000 n 
0000040272 00000 n 
0000040385 00000 n 
0000040520 00000 n 
0000040574 00000 n 
0000040679 00000 n 
0000040733 00000 n 
0000040845 00000 n 
0000040899 00000 n 
0000041005 00000 n 
0000041059 00000 n 
0000041169 00000 n 
0000041223 00000 n 
0000041299 00000 n 
0000041465 00000 n 
0000041519 00000 n 
0000041608 00000 n 
0000041799 00000 n 
0000041853 00000 n 
0000041958 00000 n 
0000042012 00000 n 
0000042163 00000 n 
0000042217 00000 n 
0000042293 00000 n 
0000042692 00000 n 
0000042746 00000 n 
0000042835 00000 n 
0000043001 00000 n 
0000043055 00000 n 
0000043159 00000 n 
0000043213 00000 n 
0000043322 00000 n 
0000043376 00000 n 
0000043452 00000 n 
0000043620 00000 n 
0000043674 00000 n 
0000043747 00000 n 
0000043964 00000 n 
0000044018 00000 n 
0000044094 00000 n 
0000044411 00000 n 
0000044465 00000 n 
0000044539 00000 n 
0000044652 00000 n 
0000044706 00000 n 
0000044819 00000 n 
0000044925 00000 n 
0000044979 00000 n 
0000045056 00000 n 
0000045186 00000 n 
0000045240 00000 n 
0000045416 00000 n 
0000045470 00000 n 
0000045575 00000 n 
0000045629 00000 n 
0000045722 00000 n 
0000045776 00000 n 
0000045849 00000 n 
0000045960 00000 n 
0000046014 00000 n 
0000046090 00000 n 
0000047010 00000 n 
0000047064 00000 n 
0000047138 00000 n 
0000047253 00000 n 
0000047307 00000 n 
0000047381 00000 n 
0000047492 00000 n 
0000047546 00000 n 
0000047622 00000 n 
0000047751 00000 n 
0000047805 00000 n 
0000047918 00000 n 
0000048034 00000 n 
0000048088 00000 n 
0000048193 00000 n 
0000048247 00000 n 
0000048355 00000 n 
0000048409 00000 n 
0000048516 00000 n 
0000048570 00000 n 
0000048663 00000 n 
0000048717 00000 n 
0000048791 00000 n 
0000048923 00000 n 
0000048977 00000 n 
0000049090 00000 n 
0000049222 00000 n 
0000049276 00000 n 
0000049353 00000 n 
0000049458 00000 n 
0000049512 00000 n 
0000049625 00000 n 
0000049679 00000 n 
0000049784 00000 n 
0000049838 00000 n 
0000050031 00000 n 
0000050085 00000 n 
0000050159 00000 n 
0000050271 00000 n 
0000050325 00000 n 
0000050398 00000 n 
0000050475 00000 n 
0000050598 00000 n 
0000050652 00000 n 
0000051554 00000 n 
0000051696 00000 n 
0000051817 00000 n 
0000051975 00000 n 
0000052052 00000 n 
0000052211 00000 n 
trailer
<<
  /ID [ <ab03532a85a230f6fe639ee33cd694d7> <ab03532a85a230f6fe639ee33cd694d7> ]
  /Info 1 0 R
  /Root 2 0 R
  /Size 324
>>
startxref
52304
%%EOF