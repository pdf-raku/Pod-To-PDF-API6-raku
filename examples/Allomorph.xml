<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="https://pdf-raku.github.io/css/tagged-pdf.css"?>
<Document>
  <H1>
    class Allomorph
  </H1>
  <H2>
    Dual value number and string
  </H2>
  <P>
    <Code>class Allomorph is Str { }</Code>
  </P>
  <P>
    The <Code>Allomorph</Code> class is a common parent class for Raku's dual value types: <Link href="/type/ComplexStr.pdf">ComplexStr</Link>, <Link href="/type/IntStr.pdf">IntStr</Link>, <Link href="/type/NumStr.pdf">NumStr</Link>, <Link href="/type/RatStr.pdf">RatStr</Link>.
  </P>
  <P>
    The dual value types (often referred to as <Link href="/language/glossary.pdf#allomorph">allomorphs</Link>) allow for the representation of a value as both a string and a numeric type. Typically
    they will be created for you when the context is "stringy" but they can be determined to be numbers, such as in some <Link href="/language/quoting.pdf">quoting constructs</Link>:
  </P>
  <P>
    <Code>my $c = &lt;42+0i&gt;;  say $c.^name; # OUTPUT: «ComplexStr»
my $i = &lt;42&gt;;     say $i.^name; # OUTPUT: «IntStr»
my $n = &lt;42.1e0&gt;; say $n.^name; # OUTPUT: «NumStr»
my $r = &lt;42.1&gt;;   say $r.^name; # OUTPUT: «RatStr»</Code>
  </P>
  <P>
    As a subclass of both a <Link href="/type/Numeric.pdf">Numeric</Link> class and <Link href="/type/Str.pdf">Str</Link>, via the <Code>Allomorph</Code> class, an allomorph will be accepted where either is expected. However, an
    allomorph does not share object identity with its <Code>Numeric</Code> parent class- or <Code>Str</Code>-only variants:
  </P>
  <P>
    <Code>my ($complex-str, $int-str, $num-str, $rat-str)
           = &lt; 42+0i 42 42e10 42.1 &gt;;

my (Complex $complex, Int $int, Num $num, Rat $rat)
           =  $complex-str, $int-str, $num-str, $rat-str;  # OK!

my Str @strings
           =  $complex-str, $int-str, $num-str, $rat-str;  # OK!

# ∈ operator cares about object identity
say 42+0i ∈ &lt; 42+0i 42 42e10 42.1 &gt;;  # OUTPUT: «False»
say 42    ∈ &lt; 42+0i 42 42e10 42.1 &gt;;  # OUTPUT: «False»
say 42e10 ∈ &lt; 42+0i 42 42e10 42.1 &gt;;  # OUTPUT: «False»
say 42.1  ∈ &lt; 42+0i 42 42e10 42.1 &gt;;  # OUTPUT: «False»</Code>
  </P>
  <P>
    Please see <Link href="/language/numerics.pdf#allomorphs">the Numerics page</Link> for a more complete description on how to work with these allomorphs.
  </P>
  <H1>
    Methods
  </H1>
  <H2>
    method ACCEPTS
  </H2>
  <P>
    <Code>multi method ACCEPTS(Allomorph:D: Any:D \a)</Code>
  </P>
  <P>
    If the <Code>a</Code> parameter is <Link href="/type/Numeric.pdf">Numeric</Link> (including another <Link href="/language/glossary.pdf#index-entry-allomorph">allomorph</Link>), checks if invocant's <Link href="/type/Numeric.pdf">Numeric</Link> value <Link href="/type/Numeric.pdf#method_accepts">ACCEPTS</Link> <Code>a</Code>. If the <Code>a</Code> parameter is <Link href="/type/Str.pdf">Str</Link>,
    checks if invocant's <Link href="/type/Str.pdf">Str</Link> value <Link href="/type/Str.pdf#method_accepts">ACCEPTS</Link> <Code>a</Code>. If the <Code>a</Code> parameter is anything else, checks if both <Link href="/type/Numeric.pdf">Numeric</Link> and <Link href="/type/Str.pdf">Str</Link> values of the invocant <Code>ACCEPTS</Code> <Code>a</Code>.
  </P>
  <P>
    <Code>say "5.0" ~~ &lt;5&gt;; # OUTPUT: «False»
say 5.0   ~~ &lt;5&gt;; # OUTPUT: «True»
say &lt;5.0&gt; ~~ &lt;5&gt;; # OUTPUT: «True»</Code>
  </P>
  <H2>
    method Bool
  </H2>
  <P>
    <Code>multi method Bool(::?CLASS:D:)</Code>
  </P>
  <P>
    Returns <Code>False</Code> if the invocant is numerically <Code>0</Code>, otherwise returns <Code>True</Code>. The <Code>Str</Code> value of the invocant is not considered.
  </P>
  <P>
    Note: For the <Code>Allomorph</Code> subclass <Link href="/type/RatStr.pdf">RatStr</Link> also see <Link href="/type/Rational.pdf#method_bool">Rational.Bool</Link>.
  </P>
  <H2>
    method chomp
  </H2>
  <P>
    <Code>method chomp(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_chomp">Str.chomp</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method chop
  </H2>
  <P>
    <Code>method chop(Allomorph:D: |c)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_chop">Str.chop</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method comb
  </H2>
  <P>
    <Code>method comb(Allomorph:D: |c)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_comb">Str.comb</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method fc
  </H2>
  <P>
    <Code>method fc(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_fc">Str.fc</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method flip
  </H2>
  <P>
    <Code>method flip(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_flip">Str.flip</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method lc
  </H2>
  <P>
    <Code>method lc(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_lc">Str.lc</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method pred
  </H2>
  <P>
    <Code>method pred(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Numeric.pdf#method_pred">Numeric.pred</Link> on the invocant's numeric value.
  </P>
  <H2>
    method raku
  </H2>
  <P>
    <Code>multi method raku(Allomorph:D:)</Code>
  </P>
  <P>
    Return a representation of the object that can be used via <Link href="/routine/EVAL.pdf">EVAL</Link> to reconstruct the value of the object.
  </P>
  <H2>
    method samecase
  </H2>
  <P>
    <Code>method samecase(Allomorph:D: |c)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#method_samecase">Str.samecase</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method samemark
  </H2>
  <P>
    <Code>method samemark(Allomorph:D: |c)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_samemark">Str.samemark</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method split
  </H2>
  <P>
    <Code>method split(Allomorph:D: |c)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_split">Str.split</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method Str
  </H2>
  <P>
    <Code>method Str(Allomorph:D:)</Code>
  </P>
  <P>
    Returns the <Code>Str</Code> value of the invocant.
  </P>
  <H2>
    method subst
  </H2>
  <P>
    <Code>method subst(Allomorph:D: |c)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#method_subst">Str.subst</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method subst-mutate
  </H2>
  <P>
    <Code>method subst-mutate(Allomorph:D \SELF: |c)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#method_subst-mutate">Str.subst-mutate</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method substr
  </H2>
  <P>
    <Code>method substr(Allomorph:D: |c)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#method_substr">Str.substr</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method substr-rw
  </H2>
  <P>
    <Code>method substr-rw(Allomorph:D \SELF: $start = 0, $want = Whatever)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#method_substr-rw">Str.substr-rw</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method succ
  </H2>
  <P>
    <Code>method succ(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Numeric.pdf#method_succ">Numeric.succ</Link> on the invocant's numeric value.
  </P>
  <H2>
    method tc
  </H2>
  <P>
    <Code>method tc(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_tc">Str.tc</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method tclc
  </H2>
  <P>
    <Code>method tclc(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_tclc">Str.tclc</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method trim
  </H2>
  <P>
    <Code>method trim(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#method_trim">Str.trim</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method trim-leading
  </H2>
  <P>
    <Code>method trim-leading(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#method_trim-leading">Str.trim-leading</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method trim-trailing
  </H2>
  <P>
    <Code>method trim-trailing(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#method_trim-trailing">Str.trim-trailing</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method uc
  </H2>
  <P>
    <Code>method uc(Allomorph:D:)</Code>
  </P>
  <P>
    Calls <Link href="/type/Str.pdf#routine_uc">Str.uc</Link> on the invocant's <Code>Str</Code> value.
  </P>
  <H2>
    method WHICH
  </H2>
  <P>
    <Code>multi method WHICH(Allomorph:D:)</Code>
  </P>
  <P>
    Returns an object of type <Link href="/type/ValueObjAt.pdf">ValueObjAt</Link> which uniquely identifies the object.
  </P>
  <P>
    <Code>my $f = &lt;42.1e0&gt;;
say $f.WHICH;     # OUTPUT: «NumStr|Num|42.1|Str|42.1e0»</Code>
  </P>
  <H1>
    Operators
  </H1>
  <H2>
    infix cmp
  </H2>
  <P>
    <Code>multi sub infix:&lt;cmp&gt;(Allomorph:D $a, Allomorph:D $b)</Code>
  </P>
  <P>
    Compare two <Code>Allomorph</Code> objects. The comparison is done on the <Code>Numeric</Code> value first and then on the <Code>Str</Code> value. If you want to compare in a
    different order then you would coerce to an <Code>Numeric</Code> or <Code>Str</Code> value first:
  </P>
  <P>
    <Code>my $f = IntStr.new(42, "smaller");
my $g = IntStr.new(43, "larger");
say $f cmp $g;          # OUTPUT: «Less»
say $f.Str cmp $g.Str;  # OUTPUT: «More»</Code>
  </P>
  <H2>
    infix eqv
  </H2>
  <P>
    <Code>multi sub infix:&lt;eqv&gt;(Allomorph:D $a, Allomorph:D $b --&gt; Bool:D)</Code>
  </P>
  <P>
    Returns <Code>True</Code> if the two <Code>Allomorph</Code> <Code>$a</Code> and <Code>$b</Code> are of the same type, their <Code>Numeric</Code> values are <Link href="/routine/eqv.pdf">equivalent</Link> and their <Code>Str</Code> values are also <Link href="/routine/eqv.pdf"></Link><Link href="/routine/eqv.pdf">
equivalent</Link>. Returns <Code>False</Code> otherwise.
  </P>
</Document>
